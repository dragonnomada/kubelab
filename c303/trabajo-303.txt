Trabajo 303 - Uso de DNS en los servicios

POD          ->    SERVICE             CLUSTER IP

nginx-pod    ->    nginx-service       10.96.20.1
httpd-pod    ->    httpd-service       10.96.30.1

                   frontend-dns        frontend.empresa.com

Host-0 /etc/hosts

10.96.20.1 frontend.empresa.com
-->
10.96.30.1 frontend.empresa.com

# 1. Diseñar los Pods para generar servicios frontend

# kubectl run <pod-name> --image=<pod-image> --labels="<key>=<value>,..."

$ kubectl run nginx-pod --image=nginx --labels="app=nginx-app"

$ kubectl run httpd-pod --image=httpd --labels="app=httpd-app"

# 2. Inspeccionar los Pods con sus labels

$ kubectl get po -o wide --show-labels

# NAME             READY   STATUS    RESTARTS   AGE     IP           NODE                 NOMINATED NODE   READINESS GATES   LABELS
# httpd-pod        1/1     Running   0          96m     10.244.2.2   cluster304-worker2   <none>           <none>            app=httpd-app
# nginx-pod        1/1     Running   0          2m13s   10.244.1.6   cluster304-worker    <none>           <none>            app=nginx-app

# 3. Diseñar los Service para exponer los Pods en un ClusterIP

$ kubectl create -f - <<EOF
kind: Service
apiVersion: v1
metadata:
  name: nginx-service
spec:
  type: ClusterIP
  clusterIP: 10.96.20.1
  selector:
    app: nginx-app
  ports:
    - port: 80
EOF

$ kubectl create -f - <<EOF
kind: Service
apiVersion: v1
metadata:
  name: httpd-service
spec:
  type: ClusterIP
  clusterIP: 10.96.30.1
  selector:
    app: httpd-app
  ports:
    - port: 80
EOF

# 4. Probar los servicios sobre el Control Plane

$ docker exec -it cluster304-control-plane curl 10.96.20.1

$ docker exec -it cluster304-control-plane curl 10.96.30.1












